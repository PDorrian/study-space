'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _style = require('./style.scss');

var _style2 = _interopRequireDefault(_style);

var _bind = require('classnames/bind');

var _bind2 = _interopRequireDefault(_bind);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Toggle = function (_React$Component) {
  _inherits(Toggle, _React$Component);

  function Toggle(props) {
    _classCallCheck(this, Toggle);

    var _this = _possibleConstructorReturn(this, (Toggle.__proto__ || Object.getPrototypeOf(Toggle)).call(this, props));

    _this.state = {
      value: _this.props.value,
      text: ['Yes', 'No']
    };

    _this.handleChange = function () {
      if (_this.props.disabled) {
        return;
      }

      _this.setState({ value: !_this.state.value }, function () {
        if (_this.props.changeCallback) {
          _this.props.changeCallback({
            target: {
              name: _this.props.name,
              value: _this.state.value
            }
          });
        }
      });
    };

    _this.componentWillReceiveProps = function (nextProps) {
      if (nextProps.value !== _this.props.value) {
        _this.setState({ value: nextProps.value });
      }
    };

    _this.toggleText = function (hasText, text, isOn) {
      if (hasText && isOn) {
        return text[0];
      } else if (hasText && !isOn) {
        return text[1];
      }
      return '';
    };

    _this.render = function () {
      var cx = _bind2.default.bind(_style2.default);
      var onClass = _this.state.value ? _style2.default.on : '';
      var outerClasses = cx(_style2.default.outer, onClass);
      var innerClasses = cx(_style2.default.inner, onClass);
      var textClasses = cx(_style2.default.text, onClass);
      var hasTextClass = _this.props.hasText ? _style2.default['has-text'] : _style2.default['no-text'];
      var disabledClass = _this.props.disabled ? _style2.default['toggle-disabled'] : '';
      var toggleWrapper = cx(_style2.default['toggle-wrapper'], hasTextClass);
      var toggleClass = cx(_style2.default['toggle-component'], disabledClass, _this.props.optClass);
      var toggleText = _this.toggleText(_this.props.hasText, _this.state.text, onClass);

      return _react2.default.createElement(
        'div',
        { className: toggleClass, onClick: _this.handleChange },
        _this.props.label && _react2.default.createElement(
          'label',
          null,
          _this.props.label
        ),
        _react2.default.createElement(
          'div',
          { className: toggleWrapper },
          _react2.default.createElement('div', { className: outerClasses }),
          _this.props.hasText ? _react2.default.createElement(
            'span',
            { className: textClasses },
            toggleText
          ) : null,
          _react2.default.createElement('div', { className: innerClasses })
        )
      );
    };

    return _this;
  }

  return Toggle;
}(_react2.default.Component);

Toggle.defaultProps = {
  disabled: false,
  value: false,
  hasText: false
};
Toggle.propTypes = {
  /**
   * Name of the toggle.
   */
  name: _propTypes2.default.string,
  /**
   * Value of the toggle.
   */
  value: _propTypes2.default.bool,
  /**
   * Text displayed with the toggle.
   */
  label: _propTypes2.default.string,
  /**
   * Whether the toggle is disabled.
   */
  disabled: _propTypes2.default.bool,
  /**
   * Optional styles to add to the toggle.
   */
  optClass: _propTypes2.default.string,
  /**
   * A callback function to be called when the toggle changes.
   */
  changeCallback: _propTypes2.default.func,
  /**
  * Boolean used to signify if text is used on the toggle
  */
  hasText: _propTypes2.default.bool
};
exports.default = Toggle;