'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _style = require('./style.scss');

var _style2 = _interopRequireDefault(_style);

var _bind = require('classnames/bind');

var _bind2 = _interopRequireDefault(_bind);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Spinner = function (_React$Component) {
  _inherits(Spinner, _React$Component);

  function Spinner(props) {
    _classCallCheck(this, Spinner);

    var _this = _possibleConstructorReturn(this, (Spinner.__proto__ || Object.getPrototypeOf(Spinner)).call(this, props));

    _initialiseProps.call(_this);

    return _this;
  }

  _createClass(Spinner, [{
    key: 'render',
    value: function render() {
      var cx = _bind2.default.bind(_style2.default);
      var loadingClass = this.state.loading ? _style2.default['loading'] : null;
      var isHiddenClass = !this.state.loading ? _style2.default['is-hidden'] : null;
      var spinnerPosition = this.props.position ? _style2.default[this.props.position] : _style2.default['absolute'];
      var spinnerWrap = cx(_style2.default['spinner-wrap'], loadingClass, spinnerPosition, this.props.optClass, isHiddenClass, this.props.className);
      var spinnerClass = cx(_style2.default[this.props.type]);

      return _react2.default.createElement(
        'span',
        { className: spinnerWrap },
        _react2.default.createElement(
          'span',
          { className: spinnerClass },
          this.innerHtml()
        )
      );
    }
  }]);

  return Spinner;
}(_react2.default.Component);

Spinner.propTypes = {
  /**
   * Delay before showing spinner (in milliseconds)
   */
  delay: _propTypes2.default.number,
  /**
   * Whether the spinner is displayed
   */
  loading: _propTypes2.default.bool,
  /**
   * CSS positioning options for the loader. By default, the spinner will be positioned
   * in the center of any element with relative positioning.
   */
  position: _propTypes2.default.oneOf(['fixed', 'inline']),
  /**
   * The type of loader you want to display.
   */
  type: _propTypes2.default.oneOf(['spinner-dots', 'spinner-bounce']).isRequired,
  /**
   * The hex code of the loader color.
   */
  color: _propTypes2.default.string,
  /**
   * Optional styles to add to the spinner.
   */
  optClass: _propTypes2.default.string,
  /**
   * A class name to be used for local styles or integrations (required to support styled-components)
   */
  className: _propTypes2.default.string
};

var _initialiseProps = function _initialiseProps() {
  var _this2 = this;

  this.state = {
    loading: false
  };

  this.componentWillMount = function () {
    _this2.getLoadingState(_this2.props);
  };

  this.componentWillReceiveProps = function (nextProps) {
    _this2.getLoadingState(nextProps);
  };

  this.shouldComponentUpdate = function (nextProps, nextState) {
    return nextState.loading !== _this2.state.loading;
  };

  this.getLoadingState = function (props) {
    if (props.loading && props.delay) {
      _this2.timeout = setTimeout(function () {
        _this2.setState({ loading: true });
      }, props.delay);
    } else {
      clearTimeout(_this2.timeout);
      _this2.setState({ loading: props.loading || false });
    }
  };

  this.getStyle = function () {
    return _this2.props.color ? { backgroundColor: _this2.props.color } : null;
  };

  this.innerHtml = function () {
    if (_this2.props.type === 'spinner-dots') {
      return _react2.default.createElement(
        'span',
        null,
        _react2.default.createElement('span', { className: _style2.default.dot1, style: _this2.getStyle() }),
        _react2.default.createElement('span', { className: _style2.default.dot2, style: _this2.getStyle() })
      );
    }
    return _react2.default.createElement(
      'span',
      null,
      _react2.default.createElement('span', { className: _style2.default.bounce1, style: _this2.getStyle() }),
      _react2.default.createElement('span', { className: _style2.default.bounce2, style: _this2.getStyle() }),
      _react2.default.createElement('span', { className: _style2.default.bounce3, style: _this2.getStyle() })
    );
  };
};

exports.default = Spinner;